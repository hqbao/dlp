<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="icon" type="image/x-icon" href="/favicon.ico?v=1">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/bootstrap/css/bootstrap.css">
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="/bootstrap/js/bootstrap.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@2.7.0/dist/tf.min.js"></script>
    <title>Artificial brains - Test your brain</title>
  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <a class="navbar-brand" href="/">ARTIFICIAL BRAINS</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item">
            <a class="nav-link" href="/ai-model/list-top-models">TOP BRAINS</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/ai-model/list-my-models">MY BRAINS</a>
          </li>
        </ul>
        <ul class="navbar-nav ml-auto">
          <li class="nav-item">
            <a class="nav-link" href="/user/profile" style="padding: 0px;">
              <img id="userAvatar" src="/images/user-icon.png" width="40" height="40" class="rounded-circle">
            </a>
          </li>
        </ul>
      </div>
    </nav>
    <br>
    <div class="container-fluid">
      <div class="row">
        <div class="col-12">
          <div style="width: 100%;text-align: center;">
            <video width="200" height="240" style="position: fixed;background-color: black;z-index: 1;"></video>
            <canvas id="overlay" width="200" height="240" style="position: relative;left: 0px;background-color: none;z-index: 2;">
          </div>
        </div>
        <div class="col-12" style="text-align: center;">
          <button class="btn btn-success" onclick="onStartClicked()">Start</button>
          <button class="btn btn-danger" onclick="onStopClicked()">Stop</button>
        </div>
      </div>
    </div>
    <script type="text/javascript" src="/js/global.js"></script>
    <script type="text/javascript" src="/js/common-authorized.js"></script>
    <script type="text/javascript">
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d');

      var isVideoReady = false;

      var overlayCanvas = document.getElementById('overlay');
      var overlayCtx = overlayCanvas.getContext('2d');

      var aiModelId = getParamInUrl('id');
      var odModel = null;
      var inference = false;
      var infering = false;

      function drawBoxes(box) {
        overlayCtx.beginPath();
        overlayCtx.strokeStyle = "#FFFFFF";
        overlayCtx.rect(box[1], box[0], (box[3]-box[1]), (box[2]-box[0]), Math.PI);
        overlayCtx.stroke();
      }

      function handleObjectDetection(validOutputs, boxes) {
        overlayCtx.clearRect(0, 0, overlayCanvas.width, overlayCanvas.height);
        for (var i = 0; i < validOutputs; i++) {
          var box = boxes[i];
          drawBoxes(box);
        }
      }

      async function inferObjectDetection() {
        var pix = tf.browser.fromPixels(canvas);
        pix = tf.cast(pix, 'float32');
        pix = pix.expandDims(0);
        var prediction = await odModel.executeAsync(pix); // TFJS not working with tensorflow 2.4
        
        var output1 = prediction[0].arraySync();
        var output2 = prediction[1].arraySync();
        if (Array.isArray(output1[0])) {
          validOutputs = output2[0];
          boxes = output1;
        }
        else {
          validOutputs = output1[0];
          boxes = output2;
        }

        handleObjectDetection(validOutputs, boxes);
      }

      function loadedmetadata(e) {
        canvas.width = 200;
        canvas.height = 240;
      }

      function timeupdate(e) {
        ctx.drawImage(this, 0, 0);
      }

      function ended(e) {}

      var video = document.querySelector('video');
      video.addEventListener('loadedmetadata', loadedmetadata, false);
      video.addEventListener('timeupdate', timeupdate, false);
      video.addEventListener('ended', ended, false);

      function onStopClicked() {
        if (isVideoReady) {
          video.pause();
          inference = false;
        }
      }

      function onStartClicked() {
        if (isVideoReady) {
          video.play();
          inference = true;
        }
      }

      function play() {
        var constraints = {audio: false, video: {width: 200, height: 240}};
        navigator.mediaDevices.getUserMedia(constraints)
        .then(function(mediaStream) {
          video.srcObject = mediaStream;
          video.onloadedmetadata = function(e) {
            isVideoReady = true;
          };
        })
        .catch(function(err) {
          console.log(err.name + ": " + err.message); 
        });
      }
      
      function load() {
        restapi.get(DLPS_URL, '/api/aimodel/detail', {id: aiModelId}, localStorage.getItem('TOKEN'), '/sign-in', async function(msgResp) {
          var model = msgResp;
          odModel = await tf.loadGraphModel(model.tfjsModelUrl);
          play();
        }, function(msg) {
          console.log(msg);
        });
      }

      setInterval(async function(){
        if (!inference) { return; }
        if (infering) { return; }
        infering = true;
        // var t = Date.now();
        await inferObjectDetection();
        // console.log('Object detection', Date.now()-t);
        infering = false;
      }, 50);

      load();
    </script>
  </body>
</html>